{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the Tamra application",
        "title": "Tamra API",
        "contact": {},
        "version": "1"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/orders": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Create a new order with the given request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Create Order Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Order",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no user to receive order",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/restaurant": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get all orders for a restaurant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders for a restaurant",
                "responses": {
                    "200": {
                        "description": "Restaurant Orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Order"
                            }
                        }
                    },
                    "404": {
                        "description": "order not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get orders",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/user": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get all orders for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders for a user",
                "responses": {
                    "200": {
                        "description": "User Orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Order"
                            }
                        }
                    },
                    "404": {
                        "description": "order not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get orders",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{id}/accept": {
            "patch": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Accept a order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Accept a order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to accept order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{id}/fulfill": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Fulfill a order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Fulfill a order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to fulfill order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{id}/reject": {
            "patch": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Reject a order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Reject a order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to reject order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{order_id}/cancel": {
            "patch": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Cancel a order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel a order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to cancel order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{order_id}/reassign": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Reassign a order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Reassign a order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to reassign order",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restaurants": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Create a new restaurant with the given request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurants"
                ],
                "summary": "Create a new restaurant",
                "parameters": [
                    {
                        "description": "Create Restaurant Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateRestaurantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Restaurant",
                        "schema": {
                            "$ref": "#/definitions/models.Restaurant"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restaurants/logo/uploadurl": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get a signed URL to upload a restaurant logo to the S3 bucket",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurants"
                ],
                "summary": "Get a signed URL to upload a restaurant logo",
                "responses": {
                    "200": {
                        "description": "Presigned URL",
                        "schema": {
                            "$ref": "#/definitions/models.RestaurantLogoUploadResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get upload URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restaurants/me": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get a restaurant by the user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurants"
                ],
                "summary": "Get a restaurant",
                "responses": {
                    "200": {
                        "description": "Restaurant",
                        "schema": {
                            "$ref": "#/definitions/models.Restaurant"
                        }
                    },
                    "404": {
                        "description": "Restaurant not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Delete a restaurant",
                "tags": [
                    "restaurants"
                ],
                "summary": "Delete a restaurant",
                "responses": {
                    "204": {
                        "description": "Restaurant deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Update a restaurant with the given request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurants"
                ],
                "summary": "Update a restaurant",
                "parameters": [
                    {
                        "description": "Update Restaurant Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRestaurantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Restaurant",
                        "schema": {
                            "$ref": "#/definitions/models.Restaurant"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restaurants/{restaurantID}": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get a restaurant by the restaurant ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restaurants"
                ],
                "summary": "Get a restaurant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restaurant ID",
                        "name": "restaurantID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Restaurant",
                        "schema": {
                            "$ref": "#/definitions/models.Restaurant"
                        }
                    },
                    "404": {
                        "description": "Restaurant not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get restaurant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Create a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created User",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Get a user by the user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Delete a user",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Update a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "description": "Update User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated User",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateOrderRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "models.CreateRestaurantRequest": {
            "type": "object",
            "required": [
                "latitude",
                "location_description",
                "logo_url",
                "longitude",
                "name"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "location_description": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "fcm_token",
                "is_active",
                "latitude",
                "longitude",
                "phone",
                "radius"
            ],
            "properties": {
                "fcm_token": {
                    "type": "string"
                },
                "is_active": {
                    "description": "Pointer to a bool so the validation library doesn't complain if the value is false",
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "radius": {
                    "type": "integer"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "required": [
                "code",
                "restaurant_id",
                "state",
                "user_id"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "restaurant_id": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Restaurant": {
            "type": "object",
            "required": [
                "latitude",
                "location_description",
                "logo_url",
                "longitude",
                "name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "location_description": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RestaurantLogoUploadResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "presigned_url": {
                    "type": "string"
                },
                "stored_file_url": {
                    "type": "string"
                }
            }
        },
        "models.UpdateRestaurantRequest": {
            "type": "object",
            "required": [
                "latitude",
                "location_description",
                "logo_url",
                "longitude",
                "name"
            ],
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "location_description": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "required": [
                "fcm_token",
                "is_active",
                "latitude",
                "longitude",
                "phone",
                "radius"
            ],
            "properties": {
                "fcm_token": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "radius": {
                    "type": "integer"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_order_received": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "radius": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "jwt": {
            "description": "Bearer token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}