version: 0.2
run-as: root

# env:
  # variables:
    # POSTGRES_DB: "tamra-postgis-test"
    # https://hub.docker.com/_/postgres#:~:text=for%20more%20details.-,POSTGRES_DB,-This%20optional%20environment
phases:
  install:
    commands:
      - yum install -y zip
      - curl -sL https://rpm.nodesource.com/setup_18.x | bash -
      - yum install -y nodejs
      - npm install -g serverless
      - go install github.com/swaggo/swag/cmd/swag@latest
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
  # pre_build:
  #   commands:
      # - echo "Logging into ECR..."
      # - docker version
      # - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 797443084412.dkr.ecr.eu-central-1.amazonaws.com
      # - REPO_URI=797443084412.dkr.ecr.eu-central-1.amazonaws.com/tamra-dev
      # - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) || "latest"
      # - IMAGE_TAG=latest
      # - echo "Pulling existing image for layer cache..."
      # - docker pull $REPO_URI:$IMAGE_TAG || true # Pull the existing image to use as a cache layer

  build:
    commands:
      - echo "Building the app..."
      # - docker build --cache-from $REPO_URI:$IMAGE_TAG -t $REPO_URI:$IMAGE_TAG -f ./deployments/test.Dockerfile .
      - docker-compose -f ./deployments/test.docker-compose.yml down || true
      - docker-compose -f ./deployments/test.docker-compose.yml up -d db
      # We use the --rm flag to remove the container after the tests are done. If it fails, that means the tests failed, otherwise, it will be removed with this command.
      - docker-compose -f ./deployments/test.docker-compose.yml run --rm app
      - echo "Tests ran successfully."
      - echo "Migrating the database..."
      - GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -tags lambda.norpc -o bin/bootstrap cmd/tamra/main.go
      - echo "Zipping the binary file into the root directory of the zip" 
      # The -j flag will store just the file, not the full path. The bootstrap file must be in the root directory of the zip.
      - zip -j bin/bootstrap.zip bin/bootstrap
      - echo "Generating swagger docs"
      - swag init -d ./cmd/tamra,./internal/app/tamra/handlers -g main.go --parseInternal --parseDependency -o docs
      - echo "Zipping the docs directory into the docs directory of the zip"
      - zip -ur bin/bootstrap.zip docs/
  post_build:
    commands:
      # - echo "Pushing the image to ECR..."
      # - docker push $REPO_URI:$IMAGE_TAG
      - echo "Deploying with serverless..."
      - serverless deploy --stage ${PIPELINE_BRANCH} --region ${PIPELINE_REGION} --verbose
      - echo "Deployment completed."

artifacts:
  files:
    - "**/*"
