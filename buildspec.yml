version: 0.2
run-as: root

env:
  variables:
    TEST_DB_USER: "postgres"
    TEST_DB_PASSWORD: "mysecretpassword"
    TEST_DB_NAME: "tamra-postgis-test"
    TEST_DB_PORT: "5433"
    POSTGRES_DB: "tamra-postgis-test"
    # https://hub.docker.com/_/postgres#:~:text=for%20more%20details.-,POSTGRES_DB,-This%20optional%20environment
phases:
  install:
    commands:
      - yum install -y zip
      - curl -sL https://rpm.nodesource.com/setup_18.x | bash -
      - yum install -y nodejs
      - npm install -g serverless
      - go install github.com/swaggo/swag/cmd/swag@latest
      # Install postgresql client using amaz-linux-extras https://docs.aws.amazon.com/linux/al2/ug/al2-extras-list.html
      # - sudo yum -y update
      # - sudo yum search "postgres"
      # - sudo yum install -y postgresql15
  pre_build:
    commands:
      # - echo "Starting test database setup..."
      # - docker pull postgis/postgis
      # - docker run --name ${TEST_DB_NAME} -e POSTGRES_DB=${POSTGRES_DB} -e POSTGRES_USER=${TEST_DB_USER} -e POSTGRES_PASSWORD=${TEST_DB_PASSWORD} -p ${TEST_DB_PORT}:5432 -d postgis/postgis 
      - docker-compose -f ./deployments/docker-compose-test.yml up
      - docker ps -a
      - echo "Waiting for database to become ready..."
      - sleep 10
      # - echo "Applying migrations..."
      # - docker run --rm -v $(pwd)/migrations:/migrations --network host migrate/migrate -path=/migrations -database "postgresql://${TEST_DB_USER}:${TEST_DB_PASSWORD}@localhost:${TEST_DB_PORT}/${TEST_DB_NAME}?sslmode=disable" up
      # - echo "Seeding database..."
      # - PGPASSWORD=${TEST_DB_PASSWORD} psql -h localhost -U ${TEST_DB_USER} -d ${TEST_DB_NAME} -p ${TEST_DB_PORT} -a -f ./seeds/seed.sql
      # Make sure to set the PGPASSWORD environment variable to avoid the password prompt.
      # - docker run --rm -v $(pwd)/seeds:/seeds --network host -e PGPASSWORD=${TEST_DB_PASSWORD} postgres:15 psql -h localhost -U ${TEST_DB_USER} -d ${TEST_DB_NAME} -p ${TEST_DB_PORT} -a -f /seeds/seed.sql
      # - echo "Database setup completed."

      - GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -tags lambda.norpc -o bin/bootstrap cmd/tamra/main.go
      - echo "Zipping the binary file into the root directory of the zip" 
      # The -j flag will store just the file, not the full path. The bootstrap file must be in the root directory of the zip.
      - zip -j bin/bootstrap.zip bin/bootstrap
      - echo "Generating swagger docs"
      - swag init -d ./cmd/tamra,./internal/app/tamra/handlers -g main.go --parseInternal --parseDependency -o docs
      - echo "Zipping the docs directory into the docs directory of the zip"
      - zip -ur bin/bootstrap.zip docs/
  build:
    commands:
      # - echo "Running Go tests..."
      # - go test -v ./...
      - echo "Deploying with serverless..."
      - serverless deploy --stage ${PIPELINE_BRANCH} --region ${PIPELINE_REGION} --verbose
  post_build:
    commands:
      - echo "Cleaning up..."
      - docker-compose -f ./deployments/docker-compose-test.yml down
      - echo "Deployment completed."

artifacts:
  files:
    - "**/*"
